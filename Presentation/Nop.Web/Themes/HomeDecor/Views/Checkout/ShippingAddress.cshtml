@model CheckoutShippingAddressModel
@using Nop.Web.Models.Checkout;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
}
@{
    string tempdata = "";
    if (TempData["message"] != null)
    {
        tempdata = Convert.ToString(TempData["message"]);
    }
}
<div class="page checkout-page">
    @Html.Action("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Address })
    <div class="page-title">
        <h1>@T("Checkout.ShippingAddress")</h1>
    </div>
    <div class="page-body checkout-data">
        @using (Html.BeginRouteForm("CheckoutShippingAddress", FormMethod.Post))
        {
            <div class="shipping-addresses" id="shipping-addresses-form">
                @Html.Widget("checkout_shipping_address_top")
                @if (Model.ExistingAddresses.Count > 0)
                {
                    <div class="section select-shipping-address">
                        <div class="title">
                            <strong>@T("Checkout.SelectShippingAddress")</strong>
                        </div>
                        <div id="error" style="display: none"></div>
                        <div class="address-grid">
                            @foreach (var item in Model.ExistingAddresses)
                            {
                                <div class="address-item">
                                    <div class="select-button">
                                        <input type="button" value="@T("Checkout.ShipToThisAddress")" class="button-1 select-shipping-address-button" onclick=" setLocation('@Url.RouteUrl("CheckoutSelectShippingAddress", new { addressid = item.Id })    ') " />
                                    </div>
                                    <ul class="address-box">
                                        <li class="name">
                                            <strong>@item.FirstName @item.LastName</strong>
                                        </li>
                                        <li class="email">@T("Address.Fields.Email"): @item.Email</li>
                                        @if (item.PhoneEnabled)
                                        {
                                            <li class="phone">
                                                @T("Address.Fields.PhoneNumber"):
                                                @item.PhoneNumber
                                            </li>
                                        }
                                        @if (item.FaxEnabled)
                                        {
                                            <li class="fax">
                                                @T("Address.Fields.FaxNumber"):
                                                @item.FaxNumber
                                            </li>
                                        }
                                        @if (item.CompanyEnabled && !String.IsNullOrEmpty(item.Company))
                                        {
                                            <li class="company">
                                                @item.Company
                                            </li>
                                        }
                                        @if (item.StreetAddressEnabled)
                                        {
                                            <li class="address1">
                                                @item.Address1
                                            </li>
                                        }
                                        @if (item.StreetAddress2Enabled && !String.IsNullOrEmpty(item.Address2))
                                        {
                                            <li class="address2">
                                                @item.Address2
                                            </li>
                                        }
                                        @if (item.CityEnabled || item.StateProvinceEnabled || item.ZipPostalCodeEnabled)
                                        {
                                            <li class="city-state-zip">
                                                @if (item.CityEnabled)
                                                {
                                                    @item.City
                                                }
                                                @if (item.CityEnabled && (item.StateProvinceEnabled || item.ZipPostalCodeEnabled))
                                                {
                                                    <text>,</text>
                                                }
                                                @if (item.StateProvinceEnabled)
                                                {
                                                    @item.StateProvinceName
                                                }
                                                @if (item.ZipPostalCodeEnabled)
                                                {
                                                    @item.ZipPostalCode
                                                }
                                            </li>
                                        }
                                        @if (item.CountryEnabled && !String.IsNullOrEmpty(item.CountryName))
                                        {
                                            <li class="country">
                                                @item.CountryName
                                            </li>
                                        }
                                    </ul>
                                    <div class="select-button">
                                        <input type="button" value="Edit" class="button-1 Edit-bbbb select-shipping-address-button" onclick="EditAddress('@item.Id    ')" />
                                    </div>
                                </div>
                            }
                     
                        </div>
                    </div>
                }
                else{
                <div id="error" style="display: none"></div>
                }
                @Html.Widget("checkout_shipping_address_middle")
                <div class="section new-shipping-address">
                    <div class="title">
                        @if (Model.ExistingAddresses.Count > 0)
                        {
                            <strong id="ExistingTitle">@T("Checkout.OrEnterNewAddress")</strong>
                        }
                        else
                        {
                            <strong>@T("Checkout.EnterShippingAddress")</strong>
                        }
                    </div>
                    <div class="enter-address">
                        <div class="enter-address-body">
                            @{
                        var dataDictAddress = new ViewDataDictionary();
                        //Merge ModelState (required for validation)
                        dataDictAddress.ModelState.Merge(ViewData.ModelState);
                        dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                                @Html.Partial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress)
                            }
                        </div>
                    </div>
                </div>
                @Html.Widget("checkout_shipping_address_bottom")
            </div>
                        if (Model.AllowPickUpInStore)
                        {
            <div class="section pickup-in-store">
                <p class="selector">
                    @Html.CheckBoxFor(x => x.PickUpInStore)
                    <label for="@Html.FieldIdFor(model => model.PickUpInStore)">@T("Checkout.PickUpInStore")</label>
                </p>
                <p class="description"><i>@T("Checkout.PickUpInStore.Description")</i></p>

                <script type="text/javascript">
                    $(document).ready(function() {

                        $("#@Html.FieldIdFor(model => model.PickUpInStore)").change(togglePickUpInStore);

                        togglePickUpInStore();
                    });

                    function togglePickUpInStore() {
                        if ($('#@Html.FieldIdFor(model => model.PickUpInStore)').is(':checked')) {
                            $('#shipping-addresses-form').hide();
                        } else {
                            $('#shipping-addresses-form').show();
                        }
                    }
                </script>
            </div>
                        }
            <div class="buttons">
                <input type="submit" name="nextstep" value="@T("Checkout.NextButton")" class="button-1 new-address-next-step-button" />
            </div>
            
            <script type="text/javascript">

                function EditAddress(AddressId)
                {
                    
                    var EditAddressID=AddressId.trim();
                    var data="{'addressId':'" + EditAddressID + "'}";
                    
                    $.ajax({
                        url: '@Url.Action("EditExistingAddress", "Checkout")',
                        type: "POST",
                        dataType: 'json',
                        data: data,
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            $("#NewAddress_Id").val(data.AddressData.Id);
                            $("#NewAddress_FirstName").val(data.AddressData.FirstName);
                            $("#NewAddress_LastName").val(data.AddressData.LastName);
                            $("#NewAddress_Email").val(data.AddressData.Email);
                            $("#NewAddress_Company").val(data.AddressData.Company);
                            $("#NewAddress_CountryId").val(data.AddressData.CountryId);
                            $("#NewAddress_CountryId").change();
                            $("#NewAddress_City").val(data.AddressData.City);
                            $("#NewAddress_Address1").val(data.AddressData.Address1);
                            $("#NewAddress_Address2").val(data.AddressData.Address2);
                            $("#NewAddress_ZipPostalCode").val(data.AddressData.ZipPostalCode);
                            $("#NewAddress_PhoneNumber").val(data.AddressData.PhoneNumber);
                            $("#NewAddress_FaxNumber").val(data.AddressData.FaxNumber);
                            $("#NewAddress_StateProvinceId").val(data.AddressData.StateProvinceId);
                            if(data.AddressData.StateProvinceId==null)
                            {
                                $("#NewAddress_StateProvinceId").val(0);
                            }
                            $("#ExistingTitle").html("Edit address");
                            var scrollTop=$('.enter-address').position().top;
                            if(scrollTop<800)
                            {
                                scrollTop=scrollTop-300;
                            }
                            //alert(scrollTop);
                            jQuery('html, body').animate({ scrollTop:scrollTop}, 1000);

                        },
                        error: function (xhr, textStatus, errorThrown) {
                
               
                        }
                    });
                    
                }
     
            </script>
        }
        <div class="section order-summary-body">
            <div class="title">
                <strong>@T("Checkout.OrderSummary")</strong>
            </div>
            @Html.Action("OrderSummary", "ShoppingCart")
        </div>
    </div>
</div>
<script>
    $(document).ready(function(){
        if('@tempdata'!=""){
            $("#error").empty();
            $("#error").append('@tempdata');
            $("#error").show();
        }
    });</script>


